name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8 black
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Test import statements
      run: |
        python -c "import claude_desktop; print('✅ claude_desktop.py imports successfully')"
        python -c "import app; print('✅ app.py imports successfully')"
      env:
        ANTHROPIC_API_KEY: "test_key_for_import_check"
    
    - name: Test application structure
      run: |
        python -c "
        import os
        required_files = ['claude_desktop.py', 'app.py', 'requirements.txt', 'README.md', '.env.example']
        missing_files = [f for f in required_files if not os.path.exists(f)]
        if missing_files:
            print(f'❌ Missing files: {missing_files}')
            exit(1)
        else:
            print('✅ All required files present')
        "

  build-info:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Generate build info
      run: |
        echo "🚀 Claude Desktop AI Build Info" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Date**: $(date)" >> $GITHUB_STEP_SUMMARY
